{"version":3,"sources":["webpack:///./src/components/project.js","webpack:///./src/pages/development.js"],"names":["Project","props","className","title","description","elements","images","elementIds","Object","keys","activeIndex","fade","technologyStack","map","tech","index","key","href","githubLink","deployLink","fetchImageComponents","data","edges","node","sources","childImageSharp","mobile","media","tablet","desktop","fixed","alt","query","development","projectsData","notesApp","simonGame","todo","setSvgWhite","projectData"],"mappings":"yPAoDeA,EA/CC,SAAAC,GACd,OACI,kBAAC,IAAD,CAAWC,UAAU,iBACvB,yBAAKA,UAAU,2EACb,wBAAIA,UAAU,+CAA+CD,EAAME,OACnE,uBAAGD,UAAU,+BAA+BD,EAAMG,aAClD,yBAAKF,UAAU,+DACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CACEG,SAAUJ,EAAMK,OAChBC,WAAYC,OAAOC,KAAKR,EAAMK,QAC9BI,YAAa,EACbC,MAAI,KAGR,yBAAKT,UAAU,uEACb,uBAAGA,UAAU,aAAb,oBACA,wBAAIA,UAAU,iBACbD,EAAMW,gBAAgBC,KAAI,SAACC,EAAMC,GAAP,OACzB,wBAAIC,IAAKD,EAAOb,UAAU,0BACvBY,MAGL,wBAAIZ,UAAU,iBACd,yBAAKA,UAAU,QACf,uBAAGe,KAAMhB,EAAMiB,WAAYhB,UAAU,2CAA0C,0CAE7ED,EAAMkB,WACN,uBAAGF,KAAMhB,EAAMkB,WAAYjB,UAAU,OAAM,mDAAgC,S,qBC3BjFkB,EAAuB,SAAAC,GAwB3B,OAvBaA,EAAKC,MAAMT,KAAI,YAAe,IAAZU,EAAW,EAAXA,KACvBC,EAAU,CAAC,OAAD,wBAETD,EAAKE,gBAAgBC,QAFZ,IAGZC,MAAM,sBAHM,+BAMTJ,EAAKE,gBAAgBG,QANZ,IAOZD,MAAM,0CAPM,+BAUTJ,EAAKE,gBAAgBI,SAVZ,IAWZF,MAAM,wBAGV,OACE,kBAAC,IAAD,CACEG,MAAON,EACPO,IAAI,GACJ7B,UAAU,+DA6DL8B,GAFEC,UApDK,SAAC,GAAc,IAAZZ,EAAW,EAAXA,KACfa,EAAe,CACnB,CACE/B,MAAO,SACPC,YAAa,4CACbQ,gBAAiB,CACf,QACA,cACA,WACA,mBACA,WAEFN,OAAQc,EAAqBC,EAAKc,UAClCjB,WAAY,+CACZC,WAAY,mCAEd,CACEhB,MAAO,aACPC,YAAa,iDACbQ,gBAAiB,CAAC,QAAS,cAAe,UAC1CN,OAAQc,EAAqBC,EAAKe,WAClClB,WAAY,6CAEd,CACEf,MAAO,aACPC,YAAa,6BACbQ,gBAAiB,CAAC,QAAS,cAAe,UAAW,mBACrDN,OAAQc,EAAqBC,EAAKgB,MAClCnB,WAAY,sCACZC,WAAY,gDAIhB,OACE,kBAAC,IAAD,CAAQmB,aAAW,GACjB,wBAAIpC,UAAU,sDAAd,eAGCgC,EAAarB,KAAI,SAAA0B,GAAW,OAC3B,kBAAC,EAAD,CACEpC,MAAOoC,EAAYpC,MACnBC,YAAamC,EAAYnC,YACzBQ,gBAAiB2B,EAAY3B,gBAC7BN,OAAQiC,EAAYjC,OACpBY,WAAYqB,EAAYrB,WACxBC,WAAYoB,EAAYpB,kBAShB","file":"component---src-pages-development-js-7a4a3746a46300d1809a.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Container from \"./container\"\r\nimport Carousel from \"./UI/carousel\"\r\n\r\nconst Project = props => {\r\n  return (\r\n      <Container className=\"md:py-12 py-8\">\r\n    <div className=\"py-8 flex flex-col rounded-lg border shadow-lg px-4 items-center w-full\">\r\n      <h2 className=\"font-bold self-center font-black capitalize\">{props.title}</h2>\r\n      <p className=\"self-center mb-8 font-bold \">{props.description}</p>\r\n      <div className=\"flex md:flex-row flex-col md:justify-between justify-center\">\r\n        <div className=\"flex md:mx-6\">\r\n          <Carousel\r\n            elements={props.images}\r\n            elementIds={Object.keys(props.images)}\r\n            activeIndex={0}\r\n            fade\r\n          />\r\n        </div>\r\n        <div className=\"flex flex-col md:mx-6 border rounded p-4 md:self-start md:mt-0 mt-8\">\r\n          <p className=\"font-bold\">Technology Stack</p>\r\n          <hr className=\"md:my-4 my-2\"/>\r\n          {props.technologyStack.map((tech, index) => (\r\n            <h6 key={index} className=\"font-black text-blue-x\">\r\n              {tech}\r\n            </h6>\r\n          ))}\r\n          <hr className=\"md:my-4 my-2\"/>\r\n          <div className=\"flex\">\r\n          <a href={props.githubLink} className=\"mr-2 p-1 bg-gray-900 text-white rounded\"><h6>View code</h6></a>\r\n          {\r\n            props.deployLink?\r\n            <a href={props.deployLink} className=\"p-1\"><h6>View deployed site</h6></a>:\"\"\r\n          }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nProject.propTypes = {\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n  technologyStack: PropTypes.array,\r\n  images: PropTypes.array,\r\n  githubLink:PropTypes.string,\r\n  deployLink : PropTypes.string\r\n}\r\n\r\nexport default Project\r\n","import React from \"react\"\r\nimport Layout from \"../HOC/layout\"\r\nimport Project from \"../components/project\"\r\nimport Img from \"gatsby-image\"\r\nimport {graphql} from \"gatsby\"\r\n\r\nconst fetchImageComponents = data => {\r\n  const imgs = data.edges.map(({ node }) => {\r\n    const sources = [\r\n      {\r\n        ...node.childImageSharp.mobile,\r\n        media: `(max-width:767px)`,\r\n      },\r\n      {\r\n        ...node.childImageSharp.tablet,\r\n        media: `(min-width:768px && max-width:1023px)`,\r\n      },\r\n      {\r\n        ...node.childImageSharp.desktop,\r\n        media: `(min-width:1024px)`,\r\n      },\r\n    ]\r\n    return(\r\n      <Img\r\n        fixed={sources}\r\n        alt=\"\"\r\n        className=\"lg:border-8 border-4 rounded-lg shadow border-gray-900\"\r\n      />\r\n    )\r\n  });\r\n  return imgs;\r\n}\r\n\r\nconst development = ({ data }) => {\r\n  const projectsData = [\r\n    {\r\n      title: \"keeper\",\r\n      description: \"A simple notes webapp with authentication\",\r\n      technologyStack: [\r\n        \"html5\",\r\n        \"tailwindCSS\",\r\n        \"React js\",\r\n        \"Node js, Express\",\r\n        \"MongoDB\",\r\n      ],\r\n      images: fetchImageComponents(data.notesApp),\r\n      githubLink: \"https://github.com/abhinav2188/Keeper-Webapp\",\r\n      deployLink: \"https://keeperx1.herokuapp.com/\",\r\n    },\r\n    {\r\n      title: \"Simon game\",\r\n      description: \"A simple game to test memory and visualization\",\r\n      technologyStack: [\"html5\", \"tailwindCSS\", \"Vue js\"],\r\n      images: fetchImageComponents(data.simonGame),\r\n      githubLink: \"https://github.com/abhinav2188/simon-game\",\r\n    },\r\n    {\r\n      title: \"To-do list\",\r\n      description: \"A simple to-do list webapp\",\r\n      technologyStack: [\"html5\", \"Vanilla CSS\", \"Node js\", \"ejs view engine\"],\r\n      images: fetchImageComponents(data.todo),\r\n      githubLink: \"https://github.com/abhinav2188/todo\",\r\n      deployLink: \"https://immense-plains-58178.herokuapp.com/\",\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <Layout setSvgWhite>\r\n      <h1 className=\"text-blue-x font-black capitalize my-4 text-center\">\r\n        My Projects\r\n      </h1>\r\n      {projectsData.map(projectData => (\r\n        <Project\r\n          title={projectData.title}\r\n          description={projectData.description}\r\n          technologyStack={projectData.technologyStack}\r\n          images={projectData.images}\r\n          githubLink={projectData.githubLink}\r\n          deployLink={projectData.deployLink}\r\n        />\r\n      ))}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default development\r\n\r\nexport const query = graphql`\r\n  query {\r\n    notesApp: allFile(\r\n      filter: {\r\n        sourceInstanceName: { eq: \"images\" }\r\n        relativePath: { regex: \"/projectScreens/notes-app/\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          childImageSharp {\r\n            desktop: fixed(width: 700, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n            tablet: fixed(width: 600, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n            mobile: fixed(width: 320, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    simonGame: allFile(\r\n      filter: {\r\n        sourceInstanceName: { eq: \"images\" }\r\n        relativePath: { regex: \"/projectScreens/simon/\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          childImageSharp {\r\n            desktop: fixed(width: 700, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n            tablet: fixed(width: 600, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n            mobile: fixed(width: 320, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    todo: allFile(\r\n      filter: {\r\n        sourceInstanceName: { eq: \"images\" }\r\n        relativePath: { regex: \"/projectScreens/todo-list/\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          childImageSharp {\r\n            desktop: fixed(width: 700, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n            tablet: fixed(width: 600, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n            mobile: fixed(width: 320, quality: 100) {\r\n              ...GatsbyImageSharpFixed\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}